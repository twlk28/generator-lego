{
  "name": "grouped-queue",
  "version": "0.2.1",
  "description": "In memory queue system prioritizing tasks",
  "main": "lib/queue.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/SBoudrias/grouped-queue.git"
  },
  "keywords": [
    "queue",
    "async",
    "task",
    "flow",
    "control"
  ],
  "author": {
    "name": "Simon Boudrias",
    "email": "admin@simonboudrias.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/SBoudrias/grouped-queue/issues"
  },
  "devDependencies": {
    "sinon": "~1.7.3"
  },
  "dependencies": {
    "lodash": "~2.4.1",
    "setimmediate": "~1.0.1"
  },
  "readme": "Grouped Queue [![Build Status](https://travis-ci.org/SBoudrias/grouped-queue.png?branch=master)](https://travis-ci.org/SBoudrias/grouped-queue)\r\n==============\r\n\r\nIn memory queue system prioritizing tasks.\r\n\r\n\r\nDocumentation\r\n=============\r\n\r\nInstallation\r\n-------------\r\n\r\n``` bash\r\n$ npm install --save grouped-queue\r\n```\r\n\r\nMethods\r\n------------\r\n\r\n### Constructor\r\n\r\nThe constructor take an optionnal array of tasks group. The first `String` name will be the first queue to be emptied, the second in second, etc.\r\n\r\nBy default, the constructor always add a `default` queue at the last position. You can overwrite the position of the `default` group if you specify it explicitly.\r\n\r\n``` javascript\r\nvar Queue = require('grouped-queue');\r\n\r\nvar queue = new Queue([ 'first', 'second', 'third' ]);\r\n```\r\n\r\n### Queue#add `add( [group], task, [options] )`\r\n\r\nAdd a task into a group queue. If no group name is specified, `default` will be use.\r\n\r\nImplicitly, each time you add a task, the queue will start emptying (if not already running).\r\n\r\nEach tasks runned in the queue will receive a callback function to call once finished.\r\n\r\n``` javascript\r\nqueue.add(function( cb ) {\r\n  DB.fetch().then( cb );\r\n});\r\n```\r\n\r\nYou can register tasks in queues that will be dropped if they're already planned. This is done with the `once` option. You pass a String (basically a name) to the `once` option.\r\n\r\n``` javascript\r\n// This one will eventually run\r\nqueue.add( method, { once: \"readDB\" });\r\n\r\n// This one will be dropped as `method` is currently in the queue\r\nqueue.add( method3, { once: \"readDB\" });\r\n```\r\n\r\n#### Pro tip\r\n\r\nBind your tasks with context and arguments!\r\n\r\n``` javascript\r\nvar task = function( models, cb ) {\r\n  /* you get `models` data here! */\r\n};\r\nqueue.add( task.bind(null, models) );\r\n```\r\n\r\n### That's all?\r\n\r\nYes!\r\n\r\nEvents\r\n-------------\r\n\r\n### `end`\r\n\r\nThis event is called **each time** the queue emptied itself.\r\n\r\n\r\nContributing\r\n=====================\r\n\r\n**Style Guide**: Please base yourself on [Idiomatic.js](https://github.com/rwldrn/idiomatic.js) style guide with two space indent  \r\n**Unit test**: Unit test are wrote in Mocha. Please add a unit test for every new feature\r\nor bug fix. `npm test` to run the test suite.  \r\n**Documentation**: Add documentation for every API change. Feel free to send corrections\r\nor better docs!  \r\n**Pull Requests**: Send _fixes_ PR on the `master` branch. Any new features should be send on the `wip`branch.\r\n\r\n\r\nLicense\r\n=====================\r\n\r\nCopyright (c) 2013 Simon Boudrias (twitter: @vaxilart)  \r\nLicensed under the MIT license.\r\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/SBoudrias/grouped-queue",
  "_id": "grouped-queue@0.2.1",
  "dist": {
    "shasum": "8c6589322b378b073816f4c35f7e7e2fb9ffdcbc"
  },
  "_from": "grouped-queue@^0.2.1",
  "_resolved": "https://registry.npmjs.org/grouped-queue/-/grouped-queue-0.2.1.tgz"
}
